#!/home/tell/venv/bin/python3
# -*- coding: utf-8 -*-

import time
import argparse
import subprocess
import os
import re
import requests
import json

from perlish import *

sys.path.append('/home/envmonbox/lib/python');
import sgtmqtt

mqhost="localhost"
mymq = None
#minutes_per_update = 4
minutes_per_update = 1
seconds_per_update = 180
old_data_threshold = 900
fwid=1
baseurl = "http://titania.telltronics.org/cgi-bin/mb-cgi"
latest_file = "/home/envmonbox/log/latest"

topics = [
    # mqtt topic 	            type        # forwarding/logging tag
    [ "monbox/cpu_load",            float,        "cpu_load" ],       
    [ "monbox/cpu_temp",            float,        "cpu_temp" ],       
    [ "monbox/room_temp",           float,        "room_temp"],      
    [ "monbox/room_humidity",       float,        "room_humidity"],  
    [ "tele/tasmota_F99C40/SENSOR", '18b20_json' ,"outdoor_temp"],  
]

parser =  argparse.ArgumentParser(description="subscribe to several mqtt topics and log their values periodicly");
parser.add_argument("--verbose", "-v", default=False, action='store_true');
args = parser.parse_args();
g_verbose = args.verbose

topicinfo = None
messages_seen = 0
tmnow = time.localtime() 
last_send_minute = tmnow.tm_min
last_send_time = time.time()

def get_fwid():
    fn = "/home/envmonbox/clientid"
    f = open(fn, "r");
    s = f.readline(); # .decode("utf-8")  # default?
    f.close()
    fwid = int(s)
    if(g_verbose):
        printf("fwid=%d\n", fwid)
    return fwid

def init_topicinfo():
    global topicinfo
    topicinfo = dict()
    for titem in list(topics):
        t = titem[0]
        ttype = titem[1]
        topicinfo[t] = dict()
        td = topicinfo[t] 
        td['last'] = None
        td['type'] = ttype
        td['lasttime'] = 0
#    printf("topicinfo=%s\n", str(topicinfo));


def on_connect(mq, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    if(mq):
        mq.subscribe("monbox/#")
        mq.subscribe("tele/#")


def on_message(msg):
    global topicinfo
    global messages_seen
    topic = str(msg.topic)
#    if(g_verbose):
#        printf("msg topic=\"%s\"\n", topic)
    
    if(topic in topicinfo):
        messages_seen += 1
        topicinfo[topic]['lasttime'] = time.time()
        ttype = topicinfo[topic]['type']
        if(ttype == float):
            s = msg.payload.decode('ascii')
            topicinfo[topic]['last'] = float(s)
        elif(ttype == str):
             topicinfo[topic]['last'] = msg.payload.decode('ascii')
        elif(ttype == int):
             s = msg.payload.decode('ascii')
             topicinfo[topic]['last'] = int(s, 0);
        elif(ttype == '18b20_json'):
            data = json.loads( msg.payload.decode('ascii') );
            tempstr = data['DS18B20']['Temperature'];
            topicinfo[topic]['last'] = tempstr
        else:
            printf("unknown type %s for topic %s; treating as str\n", str(ttype), topic)
            topicinfo[topic]['last'] = msg.payload.decode('ascii')
        if(g_verbose):             
            printf("msg %s topicinfo=%s\n", topic, topicinfo[topic])
    elif(g_verbose):
        printf("ignoring unknown topic %s\n", topic)

def print_current():
    "print current info on all known topics"
    global topicinfo
    for t, td in topicinfo.items():
        printf(" %30s %12d %10s\n", t, td['lasttime'], str(td['last']))
    printf("\n");

def fstr_if_not_old(topic, fname):
    global topicinfo
    now = time.time()
    lasttime = topicinfo[topic]['lasttime']
    if(now - lasttime < old_data_threshold):
        return sprintf("&%s=%s", fname, str(topicinfo[topic]['last']))
    else:
        printf(" fstr_if %s too old now=%d lasttime=%d delta=%d\n", fname, now, lasttime, now - lasttime)
        return ""

def log_latest():
    """write current (latest) info to an easily parsed file"""
    global topicinfo
    fp = open(latest_file, "w");
    now = time.time()
    if(fp):
        for titem in list(topics):
            topic = titem[0]
            ttype = titem[1]
            logtag = titem[2]
            value = topicinfo[topic]['last']
            lasttime = topicinfo[topic]['lasttime']
            fprintf(fp, "%18s  %s", logtag+':', str(value))
#            if(now - lasttime > old_data_threshold):
            fprintf(fp, "  %d", now - lasttime)
            fprintf(fp, "\n");
    fp.close()

def forward_web():
        url = baseurl + "?id=" + str(fwid)
        # TODO pull this into a table at the top for ease of config.
        url += fstr_if_not_old("monbox/cpu_load",  "cpu_load")
        url += fstr_if_not_old("monbox/cpu_temp",  "cpu_temp")
        url += fstr_if_not_old("monbox/room_temp",  "room_temp")
        url += fstr_if_not_old("monbox/room_humidity",  "room_humidity")
        url += fstr_if_not_old("tele/tasmota_F99C40/SENSOR",  "outdoor_temp")
        if(g_verbose):
            printf("get %s\n", url);
        r = requests.get(url);
        printf("request status %s\n", r.status_code)
    
    
def periodic():
    global last_send_time
    global messages_seen
    now = time.time()
    if(now - last_send_time > seconds_per_update):
        forward_web()
        last_send_time = now
        
    if(messages_seen > 0):
        log_latest()
        messages_seen = 0

def nomq_callback():
    printf("nomq_callback:\n")
    if(g_verbose):
        print_current()
    pass

def main():
    global mymq
    global fwid
    fwid = get_fwid()
    init_topicinfo()
    mymq = sgtmqtt.sgtmqtt(mqhost=mqhost)
    mymq.on_message = on_message
    mymq.mq.on_connect = on_connect
    mymq.periodic_callback = periodic
#    mymq.nomqtt_callback = nomq_callback
    mymq.select_loop(5)	

main()
